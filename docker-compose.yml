version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pod-attendify-db
    environment:
      POSTGRES_DB: pod_attendify
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-pod_attendify_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - pod-attendify-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pod-attendify-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-pod_attendify_password}@postgres:5432/pod_attendify?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: 7d
      MAX_FILE_SIZE: 2097152
      ALLOWED_FILE_TYPES: image/jpeg,image/png,image/gif,application/pdf,text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    networks:
      - pod-attendify-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: pod-attendify-frontend
    environment:
      VITE_API_URL: http://localhost:3001/api
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - pod-attendify-network
    restart: unless-stopped

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: pod-attendify-redis
    ports:
      - "6379:6379"
    networks:
      - pod-attendify-network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: pod-attendify-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - pod-attendify-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  pod-attendify-network:
    driver: bridge
